Использование системы логирования для сбора и анализа информации о работе приложения

1. Процесс логирования событий в приложении.
2. Уровни логирования (Info, Warn, ERROR, Debug)
3. Сбор и отправка логов в систему хранения, пакет Promtail
4. Хранение и обработка логов, пакет Loki
5. Использование Grafana для визуального представления данных
6. Анализ логов

Описать общие принципы логирования событий в приложении. Процесс сбора, хранения и анализа информации о логировании. Использование системы Alert'ов для оповещения и управления работой компонентов приложения. Организация командой работы с использованием этих инструментов.

1:
Логирование - это процесс записи событий, которые происходят с целью мониторинга и дальнейшего анализа системы.
Логи пишутся в STDOUT. 

2:
Debug - Это информация, которая помогает понять как работает программа.
Info - Это действия программы (запуск, остановка, ожидание).
Warn - Возможно опасная проблема, которые критически не мешают работать программе.
Error - Это проблемы, из-за которых программы работает неправильно, но не ломается (не останавливается).
Fatal - Это уже серьезные проблемы, из-за которых программа может полностью остановиться.

3:
Promtail - это инструмент для сбора записей. Собирает из файлов, из контейнеров, из вывода программы.

4:
Loki - это место для хранения записей.

5:
Grafana - это программа для визуализации данных. Позволяет создавать графики, разные панельки мониторинга. Использует свой PromQL (язык запросов).

6:
Анализ логов сложный из-за того, что некоторые приложения пишут их в текстовые файлы (возможно в несколько текстовых файлов) и из-за этого приходится применять дополнительные инструменты для анализа (например Elastickserch). Какие-то сервисы пишут в STDOUT и для работы с ними нужно использовать сложные в настройке инструменты по типу pyroscope.

ALERTING
Алерты нужны для автоматического реагирования на возникшую проблему.
Уведомления можно отправить в разные мессенджеры, например, Telegram, на почту и т.д.

Логирование помогает как программистам (трассировка, чтобы понимать какой компонент тормозит выполнение всего запроса), и для службы поддержки (выводить важные алерты и критичные события)
